module = _{ SOI ~ defs ~ EOI }
main   = _{ SOI ~ defs ~ expr ~ EOI }

defs = { def* }
def = { "def" ~ identifier ~ def_args ~ ":" ~ expr ~ ";" }
    def_args = { ("(" ~ identifier ~ (";" ~ identifier)* ~ ")")? }

expr = { term ~ (op ~ term)* }
term = _{ "(" ~ expr ~ ")" | atom | array | object | path | ite | call }

atom = { number | string }

number = @{ integer ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ integer)? }
    integer = { ("+" | "-")? ~ ASCII_DIGIT+ }

string = ${ "\"" ~ inner ~ "\"" }
    inner = @{ char* }
    char = {
        !("\"" | "\\") ~ ANY
        | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
        | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
    }

array = { "[" ~ expr? ~ "]" }

object = { "{" ~ pairs? ~ "}" }
    pairs = _{ pair ~ ("," ~ pair)* }
    pair = { (identifier | string) ~ value? | "(" ~ expr ~ ")" ~ value }
    value = _{ ":" ~ term }

op = _{ filter_op | assign_op | logic_op | (math_op ~ !"=") }

filter_op = _{ pipe | comma }
    pipe   = { "|" ~ !"=" }
    comma  = { "," }

assign_op = { assign | update | update_with }
    assign = {  "=" ~ !"=" }
    update = { "|=" }
    update_with = ${ math_op ~ "=" }

logic_op = _{ or | and | eq | ne | gt | ge | lt | le }
    or  = { "or"  }
    and = { "and" }
    eq = { "==" }
    ne = { "!=" }
    gt = { ">"  }
    ge = { ">=" }
    lt = { "<"  }
    le = { "<=" }

math_op = _{ add | sub | mul | div | rem }
    add = { "+" }
    sub = { "-" }
    mul = { "*" }
    div = { "/" }
    rem = { "%" }

path = { path_head ~ path_tail* }
    path_head = { (index | dot) ~ optional ~ path_range* }
    path_tail = { index         ~ optional ~ path_range* }

    path_range = { range ~ optional }

    index      = _{ dot_id | dot_str }
    dot_id     = ${ "." ~ identifier }
    dot_str    = _{ "." ~ string }
    optional   =  { question? }

    dot        =  { "." }
    question   =  { "?" }

range = { "[" ~ (from_until | until | from | at)? ~ "]" }
    from_until = { expr ~ ":" ~ expr }
    until      =        { ":" ~ expr }
    from       = { expr ~ ":" }
    at         = { expr }

ite = { "if" ~ expr ~ "then" ~ expr ~ "else" ~ expr ~ "end" }

call = { identifier ~ call_args }
    call_args = { ("(" ~ expr ~ (";" ~ expr)* ~ ")")? }


identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ "#" ~ (!NEWLINE ~ ANY)* }
