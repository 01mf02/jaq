main = _{ SOI ~ expr ~ EOI }

expr = { term ~ (op ~ term)* }
term = _{ "(" ~ expr ~ ")" | atom | array | object | path | ite | function }

atom = { null | boole | number | string }

null = { "null" }
boole = { "true" | "false" }

number = @{ integer ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ integer)? }
    integer = { ("+" | "-")? ~ ASCII_DIGIT+ }

string = ${ "\"" ~ inner ~ "\"" }
    inner = @{ char* }
    char = {
        !("\"" | "\\") ~ ANY
        | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
        | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
    }

array = { "[" ~ expr? ~ "]" }

object = { "{" ~ pairs? ~ "}" }
    pairs = _{ pair ~ ("," ~ pair)* }
    pair = { key ~ (":" ~ term)? }
    key = _{ identifier | string | "(" ~ expr ~ ")" }

op = _{ filter_op | assign_op | logic_op | math_op }

filter_op = _{ pipe | comma }
    pipe   = { "|" ~ !"=" }
    comma  = { "," }

assign_op = _{ assign | update }
    assign = {  "=" ~ !"=" }
    update = { "|=" }

logic_op = _{ or | and | eq | ne | gt | ge | lt | le }
    or  = { "or"  }
    and = { "and" }
    eq = { "==" }
    ne = { "!=" }
    gt = { ">"  }
    ge = { ">=" }
    lt = { "<"  }
    le = { "<=" }

math_op = _{ add | sub | mul | div | rem }
    add = { "+" }
    sub = { "-" }
    mul = { "*" }
    div = { "/" }
    rem = { "%" }

path = { path_head ~ path_tail* }
    path_head = { (path_index | dot) ~ path_range* }
    path_tail = { path_index ~ path_range* }

    path_index =  { index ~ question? }
    path_range = _{ range ~ question? }

    index      = _{ dot_id | dot_str }
    dot_id     = ${ "." ~ identifier }
    dot_str    = _{ "." ~ string }
    dot        =  { "." }
    question   =  { "?" }

range = { "[" ~ (from_until | until | from | at)? ~ "]" }
    from_until = { expr ~ ":" ~ expr }
    until      =        { ":" ~ expr }
    from       = { expr ~ ":" }
    at         = { expr }

ite = { "if" ~ expr ~ "then" ~ expr ~ "else" ~ expr ~ "end" }

function = { identifier ~ args? }
args = { "(" ~ expr ~ (";" ~ expr)* ~ ")" }


identifier = @{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }

WHITESPACE = _{ " " | "\t" }
